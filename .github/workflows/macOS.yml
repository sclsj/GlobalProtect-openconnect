name: Build macOS arm64 from Makefile

on:
  push:
    paths-ignore:
      - LICENSE
      - "*.md"
      - .vscode
      - .devcontainer
    branches:
      - main
      - dev
      - hotfix/*
      - feature/*
      - release/*
    tags:
      - v*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-package-macos:
    name: Build and Package macOS (arm64)
    runs-on: macos-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          # This token is needed for the Makefile to determine the version.
          # It also allows access if the repository is private.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup macOS Dependencies
        run: |
          # Install dependencies required by the Makefile and build process
          brew install jq pnpm
          
          # Install Rust and set the path
          rustup-init -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
          # Ensure the arm64 target is available
          rustup target add aarch64-apple-darwin

      - name: Build Application using Makefile
        run: |
          # Run the default 'build' target which builds the frontend and Rust components.
          # The Makefile is designed to build for the native architecture of the runner.
          make build

      - name: Stage Installation Files
        run: |
          # Create a staging directory.
          # We use the 'DESTDIR' variable to redirect the installation here.
          # This avoids trying to write to protected system locations like /usr/bin
          # and isolates the Linux-specific files.
          echo "Staging installation into the 'staging' directory..."
          make install DESTDIR=$(pwd)/staging

      - name: Package macOS Binaries
        run: |
          # The 'make install' target creates a Linux-like file structure.
          # We will package only the useful binaries from the 'staging/usr/bin' directory.
          # The other installed files (e.g., for NetworkManager) are Linux-specific and ignored.
          echo "Packaging binaries from staging/usr/bin..."
          cd staging/usr/bin
          tar -czvf ../../../macos-arm64-binaries.tar.gz .
      
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-binaries
          path: macos-arm64-binaries.tar.gz
